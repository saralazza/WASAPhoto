openapi: 3.0.3
info:
  version: 1.0.0
  title: WASAPhoto
  description: |-
    Each user will be presented with a stream of photos (images) in reverse chronological order, with information about when each photo was uploaded (date and time) and how many likes and comments it has. The stream is composed by photos from “following” (other users that the user follows). Users can place (and later remove) a “like” to photos from other users. Also, users can add comments to any image (even those uploaded by themself). Only authors can remove their comments. 
    
    Users can ban other users. If user Alice bans user Eve, Eve won’t be able to see any information about Alice. Alice can decide to remove the ban at any moment. 
    
    Users will have their profiles. The personal profile page for the user shows: the user’s photos (in reverse chronological order), how many photos have been uploaded, and the user’s followers and following. Users can change their usernames, upload photos, remove photos, and follow/unfollow other users. Removal of an image will also remove likes and comments. 
    
    A user can search other user profiles via username. 
    
    A user can log in just by specifying the username.
  
  contact:
    name: Sara Lazzaroni
    email: lazzaroni.1983548@studenti.uniroma1.it
    url: https://github.com/saralazza
    
tags:
  - name: "login"
    description: login actions
  - name: "ban"
    description: ban actions
  - name: "follow"
    description: follow actions
  - name: "userInformation"
    description: actions to obtain user information
  - name: "photo"
    description: photo actions
  - name: "like"
    description: like actions
  - name: "comment"
    description: comment actions
    
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema: 
              description: User username
              type: object
              properties:
                name:
                  description: User username
                  type: string
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: User identifier
                type: object
                properties:
                  identifier:
                    description: The user numeric indentifier
                    type: integer
                    example: 1
  
  /user:
    parameters:
      - {$ref: "#/components/parameters/username"}
    get:
      security:
      - bearerAuth: []
      tags: ["userInformation"]
      summary: search a set of users
      description: Search users which username contains a substring specified into the path url
      operationId: searchUsers
      responses:
        "200":
          description: Users list returned successfully
          content:
            apllication/json:
              schema:
                {$ref: '#/components/schemas/UsersList'}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
  
  /user/{uid}/ban/{banneduid}:
    parameters:
      - {$ref: "#/components/parameters/uid"}
      - {$ref: "#/components/parameters/banneduid"}
    put:
      security:
      - bearerAuth: []
      tags: ["ban"]
      summary: Ban user
      description: Ban a user
      operationId: banUser
      responses:
        "200":
          description: User banned successfully
          content: 
            application/json:
              schema: 
                {$ref: "#/components/schemas/Ban"}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
      
    delete:
      security:
      - bearerAuth: []
      tags: ["ban"]
      summary: Unban user
      description: Unban an user
      operationId: unbanUser
      responses:
        "204":
          description: User unbanned successfully
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}

    get:
      security:
      - bearerAuth: []  
      description: Check if the user bans another user
      summary: Check banned user
      tags: ["ban"]
      operationId: isBan
      responses:
        "200":
          description: a boolean value that indicates if the bannedueserid bans really the userid
          content:
            application/json:
              schema: 
                {$ref: '#/components/schemas/IsBan'}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
  
  /user/{uid}/follow/{followeduid}:
    parameters:
      - {$ref: "#/components/parameters/uid"}
      - {$ref: "#/components/parameters/followeduid"}
    put:
      security:
      - bearerAuth: []
      tags: ["follow"]
      summary: Follow user
      description: Follow an user
      operationId: followUser
      responses:
        "200":
          description: User followed successfully
          content: 
            application/json:
              schema: 
                {$ref: "#/components/schemas/Follow"}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
    
    delete:
      security:
      - bearerAuth: []
      tags: ["follow"]
      summary: Unfollow user
      description: Unfollow an user
      operationId: unfollowUser
      responses:
        "204":
          description: User unfollowed successfully
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
    get:
      security:
      - bearerAuth: []  
      description: Check if the user follow another user
      summary: Check followes user
      tags: ["follow"]
      operationId: isFollow
      responses:
        "200":
          description: a boolean value that indicates if the followedueserid follow really the userid
          content:
            application/json:
              schema: 
                {$ref: '#/components/schemas/IsFollow'}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
  
  /user/{uid}/myusername:
    parameters:
      - {$ref: "#/components/parameters/uid"}
    put:
      security:
      - bearerAuth: []
      description: Set username of the user
      summary: Set username of the user
      tags: ["userInformation"]
      operationId: setMyUserName
      requestBody:
        description: User username
        required: true
        content:
          application/json:
            schema:
              {$ref: '#/components/schemas/User'}
      responses:
        "200":
          description: Username set successfully
          content:
            application/json:
              schema:
                {$ref: '#/components/schemas/User'}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
        
  /user/{uid}/photo/{photoid}:
    parameters:
      - {$ref: "#/components/parameters/uid"}
      - {$ref: "#/components/parameters/photoid"}
    delete:
      security:
      - bearerAuth: []
      description: Delete a photo
      summary: Delete photo
      tags: ["photo"]
      operationId: deletePhoto
      responses:
        "204":
          description: Photo deleted successfully
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
        
  /user/{uid}/photo:
    parameters:
      - {$ref: "#/components/parameters/uid"}
    post:
      security:
      - bearerAuth: []
      description: Upload a photo
      summary: Upload photo
      tags: ["photo"]
      operationId: uploadPhoto
      requestBody:
        content:
          application/json:
            schema: 
              {$ref: '#/components/schemas/Photo'}
        required: true
      responses:
        "201":
          description: Photo uploaded successfully
          content:
            application/json:
              schema: 
                {$ref: '#/components/schemas/Photo'}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
    get:
      security:
      - bearerAuth: []
      description: Get the list of photos of an user
      summary: Get photos
      tags: ["photo"]
      operationId: getPhotos
      responses:
        "200":
          description: Photos returned successfully
          content:
            application/json:
              schema: 
                {$ref: '#/components/schemas/PhotoList'}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
      
  /user/{uid}/photo/{photoid}/likes/{likeuid}:
    parameters:
      - {$ref: "#/components/parameters/uid"}
      - {$ref: "#/components/parameters/photoid"}
      - {$ref: '#/components/parameters/likeuid'}
    put:
      security:
      - bearerAuth: []
      description: Add like to a photo
      summary: Like photo
      tags: ["like"]
      operationId: likePhoto
      responses:
        "200":
          description: Photo liked successfully
          content:
            application/json:
              schema:
                {$ref: '#/components/schemas/Like'}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
    
    delete: 
      security:
      - bearerAuth: []
      description: Delete like from a photo 
      summary: Unlike photo 
      tags: ["like"]
      operationId: unlikePhoto
      responses:
        "204":
          description: Photo unliked successfully
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
    
    get:
      security:
      - bearerAuth: []  
      description: Check if the user put like to this photo
      summary: Check liked photo
      tags: ["like"]
      operationId: isLike
      responses:
        "200":
          description: a boolean value that indicates if the user likes really the photo
          content:
            application/json:
              schema: 
                {$ref: '#/components/schemas/IsLike'}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}

        
  /user/{uid}/photo/{photoid}/comments/{commentid}:
    parameters:
      - {$ref: "#/components/parameters/uid"}
      - {$ref: "#/components/parameters/photoid"}
      - {$ref: "#/components/parameters/commentid"}
      
    delete:
      security:
      - bearerAuth: []
      description: Delete comment from a photo
      summary: Uncomment photo
      tags: ["comment"]
      operationId: uncommentPhoto
      responses:
        "204":
          description: Comment deleted successfully
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
    
  /user/{uid}/photo/{photoid}/comments:
    parameters:
      - {$ref: "#/components/parameters/uid"}
      - {$ref: "#/components/parameters/photoid"}
    post:
      security:
      - bearerAuth: []
      description: Add a comment to a photo
      summary: Comment photo
      tags: ["comment"]
      operationId: commentPhoto
      requestBody:
        content:
          application/json:
            schema: 
              {$ref: '#/components/schemas/Comment'}
        required: true
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema: 
                { $ref: '#/components/schemas/Comment'}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
    
    get:
      security:
      - bearerAuth: []
      description: Get the list of comments of a photo
      summary: Get comments
      tags: ["comment"]
      operationId: getComments
      responses:
        "200":
          description: Comments returned successfully
          content:
            application/json:
              schema: 
                {$ref: '#/components/schemas/CommentList'}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
  
  /user/{uid}/stream:
    parameters:
      - {$ref: "#/components/parameters/uid"}
    get:
      security:
      - bearerAuth: []
      description: Get the user stream composed by photos from following users
      summary: Get stream
      tags: ["userInformation"]
      operationId: getMyStream
      responses:
        "200":
          description: user stream returned successfully
          content:
            application/json:
              schema:
                {$ref: "#/components/schemas/Stream"}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
  
  /user/{uid}/profile:
    parameters:
      - {$ref: "#/components/parameters/uid"}
    get:
      security:
      - bearerAuth: []
      description: Get user profile composed by the user’s photos, how many photos have been uploaded, and the user’s followers and following.
      summary: Get profile
      tags: ["userInformation"]
      operationId: getUserProfile
      responses:
        "200":
          description: User stream returned successfully
          content:
            application/json:
              schema:
                {$ref: "#/components/schemas/Profile"}
        "400": {$ref: '#/components/responses/BadRequest'}
        "401": {$ref: '#/components/responses/Unauthorized'}
        "500": {$ref: '#/components/responses/InternalServerError'}
        

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    BadRequest:
      description: The request is incorret
    Unauthorized:
      description: Autenthication is necessary
    InternalServerError:
      description: The server encountered an unexpected error
  parameters:
    username:
      name: username
      description: Username of the user
      in: query
      required: true
      schema:
        {$ref: '#/components/schemas/User/properties/username'}
    uid:
      name: uid
      description: Id of the user
      schema:
        {$ref: '#/components/schemas/User/properties/id'}
      in: path
      required: true
    banneduid:
      name: banneduid
      description: Id of the bunned user
      schema:
        {$ref: '#/components/schemas/User/properties/id'}
      in: path
      required: true
    followeduid:
      name: followeduid
      description: Id of the followed user
      schema:
        {$ref: '#/components/schemas/User/properties/id'}
      in: path
      required: true
    photoid:
      name: photoid
      description: Id of the photo
      in: path
      required: true
      schema:
        {$ref: '#/components/schemas/Photo/properties/id'}
    likeuid:
      name: likeuid
      description: Id of the followed user
      schema:
        {$ref: '#/components/schemas/User/properties/id'}
      in: path
      required: true
    commentid:
      name: commentid
      description: Id of the comment
      schema:
        {$ref: '#/components/schemas/Comment/properties/id'}
      in: path
      required: true
        
    
  schemas:
    User:
      title: User
      description: User schema composed by the username and the id
      type: object
      properties:
        id:
          description: Unique numeric identifier
          type: integer
          example: 1
        username:
          description: User username
          type: string
          example: Maria
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16

    Like:
      title: Like
      description: Like schema composed by the id of the photo, the id of the user that likes photo and the id of the photo owner
      type: object
      properties:
        photoid: 
          {$ref: '#/components/schemas/Photo/properties/id'}
        userid:
          {$ref: '#/components/schemas/User/properties/id'}
        ownerid:
          {$ref: '#/components/schemas/User/properties/id'}
    
    Ban:
      title: Ban
      description: the id of the banned user and the id of the user that bans the other one
      type: object
      properties:
        userid:
          {$ref: '#/components/schemas/User/properties/id'}
        benneduserid:
          {$ref: '#/components/schemas/User/properties/id'}

    Follow:
      title: Follow
      description: the id of the followed user and the id of the user that follows the other one
      type: object
      properties:
        userid:
          {$ref: '#/components/schemas/User/properties/id'}
        followeduserid:
          {$ref: '#/components/schemas/User/properties/id'}
    
    Photo:
      title: Photo
      description: Photo schema composed by the id, the url, upload date, the like number, the comment number and the user id
      type: object
      properties:
        id:
          description: Unique numeric identifier
          type: integer
          example: 1
        url:
          description: Photo url
          type: string
          format: binary
          maxLength: 9999
          minLength: 0
        date:
          description: Upload date
          type: string
          format: date-time
          example: "2023-11-21T00:28:28Z"
          maxLength: 20
          minLength: 0
        likecounter:
          description: Like number
          type: integer
          minimum: 0
          example: 2
        commentcounter:
          description: Comment number
          type: integer
          minimum: 0
          example: 2
        username:
          description: User username
          type: string
          example: Maria
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        userid:
          {$ref: '#/components/schemas/User/properties/id'}
    Comment:
      title: Comment
      description: Comment schema composed by the content of the comment, an id and the user id
      type: object
      properties:
        text:
          description: Comment text
          type: string
          example: "very good"
          pattern: '^.*?$'
          minLength: 0
          maxLength: 500
        id:
          description: Comment id
          type: integer
          minimum: 0
          example: 1
        date:
          description: Upload date
          type: string
          format: date-time
          example: "2023-11-21T00:28:28Z"
          maxLength: 20
          minLength: 0
        userid:
          {$ref: '#/components/schemas/User/properties/id'}
        photoid:
          {$ref: '#/components/schemas/Photo/properties/id'}
          
    Stream:
      title: Stream
      description: Stream schema composed by the photos of following users
      type: object
      properties:
        photos:
          description: The list oh photos
          type: array
          items:
            {$ref: '#/components/schemas/Photo'}
          minItems: 0
          maxItems: 1000
        
    Profile:
      title: Profile
      description: Profile schema composed by users' photos, user username, the number of photos, the number of followed users and the list of them, the number of following users and the list of them
      type: object
      properties:
        username:
          {$ref: '#/components/schemas/User/properties/username'}
        photocounter:
          description: The number of photos
          type: integer
          minimum: 0
          example: 10
        followingcounter:
          description: The number of followings
          type: integer
          minimum: 0
          example: 100
        followercounter:
          description: The number of followers
          type: integer
          minimum: 0
          example: 50
            
    PhotoList:
      title: PhotoList
      description: Photo list schema composed by photos
      properties:
        photo:
          type: array
          description: The list of photos
          items:
            {$ref: '#/components/schemas/Photo'}
          minItems: 0
          maxItems: 1000

    CommentList:
      title: CommentList
      description: Comment list schema composed by comments of a photo
      properties:
        comments:
          description: The list of comments
          type: array
          items:
            {$ref: '#/components/schemas/Comment'}
          minItems: 0
          maxItems: 1000
    
    UsersList:
      title: UsersList
      description: Users list schema composed by users
      properties:
        users:
          description: The list of users
          type: array
          items:
            {$ref: '#/components/schemas/User'}
          minItems: 0
          maxItems: 1000
    
    IsLike:
      title: IsLike
      description: Value indicates if an user likes a photo
      type: boolean
      example: false

    IsFollow:
      title: IsFollow
      description: Value indicates if an user follows another user
      type: boolean
      example: false

    IsBan:
      title: IsBan
      description: Value indicates if an user bans another user
      type: boolean
      example: false
            
      